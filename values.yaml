# Default values for halo-mcp
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: halo-mcp
  version: "1.0.0"
  environment: production

# Frontend service
frontend:
  enabled: true
  replicaCount: 3
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70

# Backend API service
backend:
  enabled: true
  replicaCount: 2
  image:
    repository: node
    tag: "18-alpine"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Database
database:
  enabled: true
  type: postgresql
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  persistence:
    enabled: true
    size: 10Gi
    accessMode: ReadWriteOnce
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Redis cache
redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  service:
    port: 6379
  persistence:
    enabled: true
    size: 5Gi
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Worker service
worker:
  enabled: true
  replicaCount: 2
  image:
    repository: busybox
    tag: "1.36"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi

# Batch jobs
jobs:
  migration:
    enabled: true
    image:
      repository: alpine
      tag: "3.18"
      pullPolicy: IfNotPresent
    schedule: "0 2 * * *"
  cleanup:
    enabled: true
    image:
      repository: alpine
      tag: "3.18"
      pullPolicy: IfNotPresent
    schedule: "0 4 * * 0"

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
  prometheusRule:
    enabled: true

# Security
security:
  podSecurityPolicy:
    enabled: true
  networkPolicy:
    enabled: true
  rbac:
    enabled: true

# Ingress
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: halo-mcp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: halo-mcp-tls
      hosts:
        - halo-mcp.example.com

# Storage
storage:
  fileStorage:
    enabled: true
    size: 20Gi
    accessMode: ReadWriteMany
  backupStorage:
    enabled: true
    size: 50Gi
    accessMode: ReadWriteOnce

# Configuration
config:
  database:
    host: "halo-mcp-database"
    port: 5432
    name: "halo_mcp"
    username: "halo_user"
  redis:
    host: "halo-mcp-redis"
    port: 6379
  api:
    baseUrl: "https://api.halo-mcp.example.com"
    timeout: 30
  features:
    enableMetrics: true
    enableTracing: true
    enableLogging: true

# Secrets (these would be overridden in production)
secrets:
  database:
    password: "changeme123"
  redis:
    password: "redis-secret"
  api:
    secretKey: "super-secret-key"
    jwtSecret: "jwt-signing-secret"

# Node affinity and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Service Account
serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1